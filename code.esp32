/*
 * Sistem Monitoring Pompa Air Sumur Bor Bertenaga Surya
 * Berbasis Fuzzy Logic dan IoT (Blynk) - SIMPLIFIED VERSION
 * 
 * Deskripsi: Sistem dual-control untuk pompa air:
 * 1. Kontrol OTOMATIS: PV + Fuzzy Logic → Relay Channel 1
 * 2. Kontrol MANUAL: Baterai + Blynk → Relay Channel 2
 * 
 * Komponen:
 * - ESP32 NodeMCU
 * - Sensor Tegangan PV
 * - Sensor Arus PV (ACS712)
 * - Relay 2 Channel (channel 1 & 2)
 * - Panel Surya (PV)
 * - Pompa Air DC
 * - Baterai (untuk kontrol manual)
 * 
 * Virtual Pins Blynk (5 pins only):
 * V0 - Display Tegangan PV
 * V1 - Display Arus PV  
 * V2 - Display Daya PV
 * V3 - LED Status Pompa Otomatis
 * V4 - LED Status Pompa Manual
 * V5 - Button Kontrol Manual Pompa
 */

#include <WiFi.h>
#include <BlynkSimpleEsp32.h>

// Kredensial Blynk - GANTI DENGAN KREDENSIAL ANDA
#define BLYNK_TEMPLATE_ID "TMPL_ID_ANDA"
#define BLYNK_DEVICE_NAME "Pompa Surya Dual Control"
#define BLYNK_AUTH_TOKEN "TOKEN_BLYNK_ANDA"
#define BLYNK_PRINT Serial

// Kredensial WiFi - GANTI DENGAN KREDENSIAL ANDA
const char* ssid = "NAMA_WIFI_ANDA";
const char* password = "PASSWORD_WIFI_ANDA";

// Pin Konfigurasi ESP32
#define PIN_SENSOR_TEGANGAN_PV 34         // Pin ADC untuk sensor tegangan PV
#define PIN_SENSOR_ARUS_PV 35             // Pin ADC untuk sensor arus PV
#define PIN_RELAY_POMPA_AUTO 2            // Pin kontrol relay pompa otomatis (Channel 1)
#define PIN_RELAY_POMPA_MANUAL 4          // Pin kontrol relay pompa manual (Channel 2)
#define PIN_LED_STATUS 5                  // Pin LED status sistem

// Konstanta Kalibrasi Sensor
#define RASIO_PEMBAGI_TEGANGAN 11.0       // Rasio pembagi tegangan (R1+R2)/R2
#define SENSITIVITAS_SENSOR_ARUS 0.1      // 100mV/A untuk ACS712-20A
#define OFFSET_SENSOR_ARUS 1.65           // Offset 1.65V pada 0A
#define RESOLUSI_ADC 4095.0               // ADC 12-bit
#define TEGANGAN_REFERENSI_ADC 3.3        // Tegangan referensi ADC

// Virtual Pin Blynk (HANYA 5 PIN)
#define VPIN_TEGANGAN_PV V0               // Display tegangan PV
#define VPIN_ARUS_PV V1                   // Display arus PV
#define VPIN_DAYA_PV V2                   // Display daya PV
#define VPIN_LED_AUTO V3                  // LED status pompa otomatis
#define VPIN_LED_MANUAL V4                // LED status pompa manual
#define VPIN_BUTTON_MANUAL V5             // Button kontrol manual pompa

// Konstanta Sistem
#define INTERVAL_SENSOR 1000              // Interval pembacaan sensor (ms)
#define INTERVAL_BLYNK 2000               // Interval pengiriman data Blynk (ms)
#define DAYA_MIN_OPERASI 8.0              // Daya minimum untuk operasi otomatis (Watt)

// Struktur Data Sensor PV
struct SensorPV {
  float tegangan;
  float arus;
  float daya;
  bool valid;
};

// Struktur Fungsi Keanggotaan Fuzzy
struct FungsiKeanggotaan {
  float rendah;
  float sedang;
  float tinggi;
};

// Struktur Output Fuzzy
struct OutputFuzzy {
  bool pompa_hidup;
  float confidence_level;
  String reasoning;
};

// Struktur Kontrol Pompa
struct KontrolPompa {
  bool auto_active;
  bool manual_active;
  unsigned long last_auto_change;
  unsigned long last_manual_change;
};

// Variabel Global
SensorPV data_pv;
OutputFuzzy hasil_fuzzy;
KontrolPompa kontrol_pompa = {false, false, 0, 0};

unsigned long last_sensor_read = 0;
unsigned long last_blynk_send = 0;
bool sistem_ready = false;

// Timer untuk mencegah switching terlalu cepat
#define MIN_SWITCH_INTERVAL 3000          // 3 detik minimum antara perubahan status

void setup() {
  Serial.begin(115200);
  delay(1000);
  
  Serial.println("=== SISTEM MONITORING POMPA DUAL CONTROL ===");
  Serial.println("PV Auto Control + Manual Battery Control");
  Serial.println("Virtual Pins: V0-V5 only");
  Serial.println("Initializing system...");
  
  // Inisialisasi pin output
  pinMode(PIN_RELAY_POMPA_AUTO, OUTPUT);
  pinMode(PIN_RELAY_POMPA_MANUAL, OUTPUT);
  pinMode(PIN_LED_STATUS, OUTPUT);
  
  // Set kondisi awal - semua relay OFF
  digitalWrite(PIN_RELAY_POMPA_AUTO, LOW);
  digitalWrite(PIN_RELAY_POMPA_MANUAL, LOW);
  digitalWrite(PIN_LED_STATUS, LOW);
  
  // Konfigurasi ADC
  analogReadResolution(12);
  analogSetAttenuation(ADC_11db);
  
  // Inisialisasi WiFi
  inisialisasiWiFi();
  
  // Inisialisasi Blynk
  if (WiFi.status() == WL_CONNECTED) {
    Blynk.begin(BLYNK_AUTH_TOKEN, ssid, password);
    Serial.println("Blynk connected successfully");
    Blynk.syncAll();
  }
  
  // Test relay saat startup
  testRelay();
  
  // Sistem siap
  sistem_ready = true;
  digitalWrite(PIN_LED_STATUS, HIGH);
  
  Serial.println("=== SISTEM SIAP BEROPERASI ===");
  Serial.println("Auto: PV → Fuzzy Logic → Relay Ch1");
  Serial.println("Manual: Battery → Blynk → Relay Ch2");
  Serial.println("Virtual Pins: V0(V_PV), V1(I_PV), V2(P_PV), V3(LED_Auto), V4(LED_Manual), V5(Button)");
  Serial.println("=====================================");
}

void loop() {
  // Jalankan Blynk (prioritas tinggi)
  if (WiFi.status() == WL_CONNECTED) {
    Blynk.run();
  }
  
  // Baca sensor PV secara berkala
  if (millis() - last_sensor_read >= INTERVAL_SENSOR) {
    bacaSensorPV();
    
    // Proses fuzzy logic dan kontrol otomatis
    if (data_pv.valid) {
      prosesFuzzyLogic();
      eksekusiKontrolOtomatis();
    }
    
    last_sensor_read = millis();
  }
  
  // Kirim data ke Blynk secara berkala
  if (millis() - last_blynk_send >= INTERVAL_BLYNK) {
    kirimDataBlynk();
    last_blynk_send = millis();
  }
  
  // Maintenance
  cekKoneksiWiFi();
  
  delay(50); // Prevent watchdog reset
}

// ===== FUNGSI INISIALISASI =====

void inisialisasiWiFi() {
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  
  Serial.print("Connecting to WiFi");
  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 20) {
    delay(500);
    Serial.print(".");
    attempts++;
  }
  
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println();
    Serial.print("WiFi connected! IP: ");
    Serial.println(WiFi.localIP());
    Serial.print("Signal strength: ");
    Serial.print(WiFi.RSSI());
    Serial.println(" dBm");
  } else {
    Serial.println();
    Serial.println("WiFi connection failed! Running in offline mode.");
  }
}

void testRelay() {
  Serial.println("Testing relay channels...");
  
  // Test relay auto (Channel 1)
  Serial.println("Testing Auto Relay (Ch1)");
  digitalWrite(PIN_RELAY_POMPA_AUTO, HIGH);
  delay(1000);
  digitalWrite(PIN_RELAY_POMPA_AUTO, LOW);
  
  delay(500);
  
  // Test relay manual (Channel 2)
  Serial.println("Testing Manual Relay (Ch2)");
  digitalWrite(PIN_RELAY_POMPA_MANUAL, HIGH);
  delay(1000);
  digitalWrite(PIN_RELAY_POMPA_MANUAL, LOW);
  
  Serial.println("Relay test completed");
}

// ===== FUNGSI SENSOR PV =====

void bacaSensorPV() {
  // Baca multiple sample untuk akurasi
  const int num_samples = 8;
  long sum_tegangan = 0;
  long sum_arus = 0;
  
  for (int i = 0; i < num_samples; i++) {
    sum_tegangan += analogRead(PIN_SENSOR_TEGANGAN_PV);
    sum_arus += analogRead(PIN_SENSOR_ARUS_PV);
    delay(5);
  }
  
  // Hitung rata-rata
  float avg_tegangan_adc = sum_tegangan / (float)num_samples;
  float avg_arus_adc = sum_arus / (float)num_samples;
  
  // Konversi ke nilai sebenarnya
  data_pv.tegangan = konversiTegangan(avg_tegangan_adc);
  data_pv.arus = konversiArus(avg_arus_adc);
  data_pv.daya = data_pv.tegangan * data_pv.arus;
  
  // Validasi data sensor
  data_pv.valid = (data_pv.tegangan >= 0 && data_pv.tegangan <= 30 && 
                   data_pv.arus >= 0 && data_pv.arus <= 15 &&
                   data_pv.daya >= 0);
  
  // Debug output
  Serial.printf("PV: %.2fV, %.2fA, %.2fW - %s\n", 
                data_pv.tegangan, data_pv.arus, data_pv.daya,
                data_pv.valid ? "Valid" : "Invalid");
}

float konversiTegangan(float adc_value) {
  float tegangan_adc = (adc_value / RESOLUSI_ADC) * TEGANGAN_REFERENSI_ADC;
  return tegangan_adc * RASIO_PEMBAGI_TEGANGAN;
}

float konversiArus(float adc_value) {
  float tegangan_sensor = (adc_value / RESOLUSI_ADC) * TEGANGAN_REFERENSI_ADC;
  float arus = (tegangan_sensor - OFFSET_SENSOR_ARUS) / SENSITIVITAS_SENSOR_ARUS;
  return max(0.0f, arus); // Pastikan tidak negatif
}

// ===== FUNGSI FUZZY LOGIC =====

void prosesFuzzyLogic() {
  if (!data_pv.valid) {
    hasil_fuzzy = {false, 0.0, "Data sensor tidak valid"};
    return;
  }
  
  // Fuzzifikasi input
  FungsiKeanggotaan tegangan_fuzzy = fuzzifikasiTegangan(data_pv.tegangan);
  FungsiKeanggotaan arus_fuzzy = fuzzifikasiArus(data_pv.arus);
  
  // Evaluasi rules fuzzy
  hasil_fuzzy = evaluasiRulesFuzzy(tegangan_fuzzy, arus_fuzzy);
  
  // Debug fuzzy output
  Serial.printf("Fuzzy: %s (%.2f) - %s\n", 
                hasil_fuzzy.pompa_hidup ? "ON" : "OFF",
                hasil_fuzzy.confidence_level,
                hasil_fuzzy.reasoning.c_str());
}

FungsiKeanggotaan fuzzifikasiTegangan(float tegangan) {
  FungsiKeanggotaan hasil = {0, 0, 0};
  
  // Membership function untuk tegangan PV
  // Rendah: 0-12V (optimal at 6V)
  if (tegangan <= 6.0) {
    hasil.rendah = 1.0;
  } else if (tegangan > 6.0 && tegangan < 12.0) {
    hasil.rendah = (12.0 - tegangan) / 6.0;
  }
  
  // Sedang: 10-18V (optimal at 14V)  
  if (tegangan >= 10.0 && tegangan <= 14.0) {
    hasil.sedang = (tegangan - 10.0) / 4.0;
  } else if (tegangan > 14.0 && tegangan <= 18.0) {
    hasil.sedang = (18.0 - tegangan) / 4.0;
  }
  
  // Tinggi: 16V+ (optimal at 20V+)
  if (tegangan >= 16.0 && tegangan <= 20.0) {
    hasil.tinggi = (tegangan - 16.0) / 4.0;
  } else if (tegangan > 20.0) {
    hasil.tinggi = 1.0;
  }
  
  return hasil;
}

FungsiKeanggotaan fuzzifikasiArus(float arus) {
  FungsiKeanggotaan hasil = {0, 0, 0};
  
  // Membership function untuk arus PV
  // Rendah: 0-1.5A (optimal at 0.75A)
  if (arus <= 0.75) {
    hasil.rendah = 1.0;
  } else if (arus > 0.75 && arus < 1.5) {
    hasil.rendah = (1.5 - arus) / 0.75;
  }
  
  // Sedang: 1.2-3.5A (optimal at 2.35A)
  if (arus >= 1.2 && arus <= 2.35) {
    hasil.sedang = (arus - 1.2) / 1.15;
  } else if (arus > 2.35 && arus <= 3.5) {
    hasil.sedang = (3.5 - arus) / 1.15;
  }
  
  // Tinggi: 3A+ (optimal at 4A+)
  if (arus >= 3.0 && arus <= 4.0) {
    hasil.tinggi = (arus - 3.0) / 1.0;
  } else if (arus > 4.0) {
    hasil.tinggi = 1.0;
  }
  
  return hasil;
}

OutputFuzzy evaluasiRulesFuzzy(FungsiKeanggotaan teg, FungsiKeanggotaan arus) {
  OutputFuzzy output;
  float activation_hidup = 0.0;
  float activation_mati = 0.0;
  String reasoning = "";
  
  // ===== RULES untuk HIDUP =====
  // Rule 1: Tegangan SEDANG dan Arus SEDANG → HIDUP
  float rule1 = min(teg.sedang, arus.sedang);
  activation_hidup = max(activation_hidup, rule1);
  
  // Rule 2: Tegangan SEDANG dan Arus TINGGI → HIDUP  
  float rule2 = min(teg.sedang, arus.tinggi);
  activation_hidup = max(activation_hidup, rule2);
  
  // Rule 3: Tegangan TINGGI dan Arus SEDANG → HIDUP
  float rule3 = min(teg.tinggi, arus.sedang);
  activation_hidup = max(activation_hidup, rule3);
  
  // Rule 4: Tegangan TINGGI dan Arus TINGGI → HIDUP
  float rule4 = min(teg.tinggi, arus.tinggi);
  activation_hidup = max(activation_hidup, rule4);
  
  // ===== RULES untuk MATI =====
  // Rule 5: Tegangan RENDAH → MATI (prioritas tinggi)
  float rule5 = teg.rendah;
  activation_mati = max(activation_mati, rule5);
  
  // Rule 6: Arus RENDAH → MATI
  float rule6 = arus.rendah;
  activation_mati = max(activation_mati, rule6);
  
  // Rule 7: Tegangan SEDANG dan Arus RENDAH → MATI
  float rule7 = min(teg.sedang, arus.rendah);
  activation_mati = max(activation_mati, rule7);
  
  // ===== DEFUZZIFIKASI & KEPUTUSAN =====
  // Ambang batas untuk aktivasi
  float threshold_hidup = 0.4;
  
  if (activation_hidup > activation_mati && activation_hidup >= threshold_hidup) {
    output.pompa_hidup = true;
    output.confidence_level = activation_hidup;
    
    // Tentukan reasoning berdasarkan rule yang paling dominan
    if (rule4 >= 0.5) reasoning = "Tegangan & Arus Optimal";
    else if (rule3 >= 0.4) reasoning = "Tegangan Tinggi, Arus Cukup";
    else if (rule2 >= 0.4) reasoning = "Arus Tinggi, Tegangan Cukup";
    else if (rule1 >= 0.4) reasoning = "Kondisi PV Cukup";
    else reasoning = "PV Memadai";
  } else {
    output.pompa_hidup = false;
    output.confidence_level = activation_mati;
    
    // Tentukan reasoning berdasarkan rule yang paling dominan
    if (rule5 >= 0.5) reasoning = "Tegangan PV Terlalu Rendah";
    else if (rule6 >= 0.5) reasoning = "Arus PV Terlalu Rendah";
    else if (rule7 >= 0.3) reasoning = "Tegangan Cukup, Arus Kurang";
    else reasoning = "Kondisi PV Tidak Memadai";
  }
  
  // Proteksi tambahan berdasarkan daya minimum
  if (data_pv.daya < DAYA_MIN_OPERASI) {
    output.pompa_hidup = false;
    output.confidence_level = 1.0;
    reasoning = String("Daya < ") + String(DAYA_MIN_OPERASI) + "W";
  }
  
  output.reasoning = reasoning;
  return output;
}

// ===== FUNGSI KONTROL POMPA =====

void eksekusiKontrolOtomatis() {
  bool should_activate = hasil_fuzzy.pompa_hidup;
  
  // Proteksi: Jika manual aktif, auto tidak boleh aktif (prioritas manual)
  if (kontrol_pompa.manual_active) {
    should_activate = false;
  }
  
  // Proteksi waktu: hindari switching terlalu cepat
  if (millis() - kontrol_pompa.last_auto_change < MIN_SWITCH_INTERVAL) {
    return;
  }
  
  // Eksekusi perubahan status jika diperlukan
  if (should_activate != kontrol_pompa.auto_active) {
    if (should_activate) {
      aktivasiPompaOtomatis();
    } else {
      deaktivasiPompaOtomatis();
    }
    kontrol_pompa.last_auto_change = millis();
  }
}

void aktivasiPompaOtomatis() {
  digitalWrite(PIN_RELAY_POMPA_AUTO, HIGH);
  kontrol_pompa.auto_active = true;
  
  Serial.println(">>> POMPA OTOMATIS DIHIDUPKAN <<<");
  Serial.printf("Reason: %s (Confidence: %.2f)\n", 
                hasil_fuzzy.reasoning.c_str(), 
                hasil_fuzzy.confidence_level);
  
  // Kirim notifikasi ke Blynk jika terhubung
  if (WiFi.status() == WL_CONNECTED) {
    Blynk.logEvent("pump_auto_on");
  }
}

void deaktivasiPompaOtomatis() {
  digitalWrite(PIN_RELAY_POMPA_AUTO, LOW);
  kontrol_pompa.auto_active = false;
  
  Serial.println(">>> POMPA OTOMATIS DIMATIKAN <<<");
  Serial.printf("Reason: %s\n", hasil_fuzzy.reasoning.c_str());
  
  // Kirim notifikasi ke Blynk jika terhubung
  if (WiFi.status() == WL_CONNECTED) {
    Blynk.logEvent("pump_auto_off");
  }
}

void aktivasiPompaManual() {
  // Proteksi: Matikan auto jika manual akan dihidupkan
  if (kontrol_pompa.auto_active) {
    digitalWrite(PIN_RELAY_POMPA_AUTO, LOW);
    kontrol_pompa.auto_active = false;
    Serial.println("Auto pump disabled - Manual priority");
  }
  
  digitalWrite(PIN_RELAY_POMPA_MANUAL, HIGH);
  kontrol_pompa.manual_active = true;
  kontrol_pompa.last_manual_change = millis();
  
  Serial.println(">>> POMPA MANUAL DIHIDUPKAN <<<");
  Serial.println("Source: Battery via Blynk");
}

void deaktivasiPompaManual() {
  digitalWrite(PIN_RELAY_POMPA_MANUAL, LOW);
  kontrol_pompa.manual_active = false;
  kontrol_pompa.last_manual_change = millis();
  
  Serial.println(">>> POMPA MANUAL DIMATIKAN <<<");
}

// ===== BLYNK HANDLERS =====

// Handler untuk tombol manual (V5)
BLYNK_WRITE(VPIN_BUTTON_MANUAL) {
  int value = param.asInt();
  
  // Proteksi waktu: hindari switching terlalu cepat
  if (millis() - kontrol_pompa.last_manual_change < MIN_SWITCH_INTERVAL) {
    Serial.println("Manual control ignored - too fast switching");
    return;
  }
  
  if (value == 1) {
    aktivasiPompaManual();
  } else {
    deaktivasiPompaManual();
  }
}

// Handler saat Blynk terhubung
BLYNK_CONNECTED() {
  Serial.println("Blynk connected!");
  // Sync status tombol manual
  Blynk.syncVirtual(VPIN_BUTTON_MANUAL);
}

// ===== FUNGSI MONITORING =====

void kirimDataBlynk() {
  if (WiFi.status() != WL_CONNECTED) return;
  
  // Kirim data sensor PV ke V0, V1, V2
  Blynk.virtualWrite(VPIN_TEGANGAN_PV, data_pv.tegangan);
  Blynk.virtualWrite(VPIN_ARUS_PV, data_pv.arus);
  Blynk.virtualWrite(VPIN_DAYA_PV, data_pv.daya);
  
  // Kirim status LED pompa ke V3, V4
  Blynk.virtualWrite(VPIN_LED_AUTO, kontrol_pompa.auto_active ? 1 : 0);
  Blynk.virtualWrite(VPIN_LED_MANUAL, kontrol_pompa.manual_active ? 1 : 0);
}

void cekKoneksiWiFi() {
  static unsigned long last_wifi_check = 0;
  
  if (millis() - last_wifi_check > 30000) { // Cek setiap 30 detik
    if (WiFi.status() != WL_CONNECTED) {
      Serial.println("WiFi disconnected, attempting reconnect...");
      WiFi.reconnect();
    }
    last_wifi_check = millis();
  }
}
